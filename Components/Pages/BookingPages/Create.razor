@page "/bookings/create"
@rendermode InteractiveServer
@using CAGolfClubDB.Models
@using CAGolfClubDB.Data
@inject NavigationManager NavigationManager
@inject BookingRepository BookingRepo
@inject PlayerRepository PlayerRepo

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Booking</h2>
<hr />
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">
        @ErrorMessage
    </div>
}

<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Booking" OnValidSubmit="AddBooking" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label for="playerid" class="form-label">Booking By:</label>
                <InputSelect id="playerid" @bind-Value="Booking.PlayerId" class="form-control" aria-required="true">
                    @foreach (var player in Players)
                    {
                        <option value="@player.Id">@player.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="date" class="form-label">Date:</label>
                <InputDate id="date" @bind-Value="Booking.Date" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Booking.Date" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="slot" class="form-label">Slot:</label>
                <InputSelect id="slot" @bind-Value="Booking.Slot" class="form-control" aria-required="true">
                    @foreach (var item in TimeSlots)
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>

    <div class="col-md-6">
        @if (Players.Count > 0)
        {
            <div class="row align-items-center">
                <div class="mb-3">
                    <label for="playerSelect" class="form-label">Select a Player:</label>
                    <select id="playerSelect" class="form-select" @bind-Value="SelectedPlayerId" @bind-Value:event="onchange">
                        <option value="0">-- Select --</option>
                        @foreach (var player in Players)
                        {
                            <option value="@player.Id">@player.Name</option>
                        }
                    </select>
                </div>

                <div class="mb-2">
                    <button class="btn btn-primary" @onclick="AddPlayer" disabled="@(SelectedPlayers.Count >= 4 || SelectedPlayerId == 0)">Add Player</button>
                </div>
            </div>
        }

        @if (SelectedPlayers.Count >= 4)
        {
            <p class="text-danger">Maximum of 4 players reached.</p>
        }

        <table class="table">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Player Name</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var player in SelectedPlayers.Select((p, index) => new { p, index }))
                {
                    <tr>
                        <td>@(player.index + 1)</td>
                        <td>@player.p.Name</td>
                        <td><button class="btn btn-danger" @onclick="() => RemovePlayer(player.index, player.p.Id)">Remove</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


<div>
    <a href="/bookings">Back to List</a>
</div>

@code {
    private Booking Booking { get; set; } = new() { Date = DateTime.Today };

    private List<Player> Players = new();

    private List<string> TimeSlots { get; set; } = new();

    private string ErrorMessage = string.Empty;

    private List<Player> SelectedPlayers = new();

    private int SelectedPlayerId = 0;

    protected override async Task OnInitializedAsync()
    {
        TimeSlots = BookingRepo.GenerateAvailableTimes();
        Players = await PlayerRepo.GetPlayersAsync();
    }

    private async Task AddBooking()
    {
        if (!SlotAvailable())
        {
            ErrorMessage = "Select a future slot.";
            return;
        }

        var alreadyBooked = await BookingRepo.IsPlayerAlreadyBookedAsync(Booking.PlayerId, Booking.Date);
        if (alreadyBooked)
        {
            ErrorMessage = "Member already has a booking on this day.";
            return;
        }

        var slotAvailable = await BookingRepo.IsSlotAvailableAsync(Booking.Slot, Booking.Date);
        if (!slotAvailable)
        {
            ErrorMessage = "Slot is not available.";
            return;
        }

        if (!SelectedPlayers.Any())
        {
            ErrorMessage = "Please add at least one player.";
            return;
        }

        try
        {
            await BookingRepo.AddBookingAsync(Booking, SelectedPlayers.Select(p => new BookingPlayer { PlayerId = p.Id }).ToList());
            NavigationManager.NavigateTo("/bookings");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private bool SlotAvailable()
    {
        TimeSpan selectedTime = TimeSpan.Parse(Booking.Slot);
        DateTime currentDate = DateTime.Now;
        DateTime selectedDate = currentDate.Date + selectedTime;

        return selectedDate > currentDate;
    }

    private void AddPlayer()
    {
        if (SelectedPlayers.Count < 4)
        {
            var player = Players.FirstOrDefault(p => p.Id == SelectedPlayerId);
            if (player != null && !SelectedPlayers.Any(p => p.Id == player.Id))
            {
                SelectedPlayers.Add(player);
                SelectedPlayerId = 0; // Reset dropdown
            }
        }
    }

    private void RemovePlayer(int index, int playerId)
    {
        var playerToRemove = SelectedPlayers.FirstOrDefault(p => p.Id == playerId);
        if (playerToRemove != null)
        {
            SelectedPlayers.Remove(playerToRemove);
        }
    }
}
