@page "/bookings/create"
@rendermode InteractiveServer
@using CAGolfClubDB.Models
@using CAGolfClubDB.Data
@inject NavigationManager NavigationManager
@inject BookingRepository BookingRepo
@inject PlayerRepository PlayerRepo


<!--
TODO:
- [x] refatorar pagina. mover todas as acoes do banco de dados par ao repositorio correto
- [x] verificar novamente a validacao de data. Nao permite cadastrar data futura com slot no passado
- blocar o bota de criar ate todos os player forem adicionados
- remover players ja adicionados da lista (desejavel)
- adicionar validacao na modificacao dos campos (desejavel)
- bug: valdiacao duplicada. remover uma das validacoes: The date must be today or in the future.
-->

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Booking</h2>
<hr />
@if (!string.IsNullOrEmpty(ErrorMessage))
{
	<div class="alert alert-danger">
		@ErrorMessage
	</div>
}

<EditForm method="post" Model="Booking" OnValidSubmit="AddBooking" FormName="create" Enhance>
	<div class="container">
		<div class="row">
			<DataAnnotationsValidator />
			<ValidationSummary class="text-danger" role="alert" />

			<div class="mb-3">
				<label for="playerid" class="form-label">Booking By:</label>
				<InputSelect id="playerid" class="form-control" aria-required="true"
				@bind-Value="Booking.PlayerId">
					@foreach (var player in Players)
					{
						<option value="@player.Id">@player.Name</option>
					}
				</InputSelect>
			</div>

			<div class="mb-3">
				<label for="date" class="form-label">Date:</label>
				<InputDate id="datePicker" class="form-control" @bind-Value="@BookingDate" />
			</div>

			<div class="mb-3">
				<label for="slot" class="form-label">Slot:</label>
				<InputSelect id="slot" @bind-Value="Booking.Slot" class="form-control" aria-required="true">
					@foreach (var item in TimeSlots)
					{
						<option value="@item">@item</option>
					}
				</InputSelect>
			</div>
		</div>

		<div class="row">
			@if (Players.Count > 0)
			{
				<div class="row align-items-center">
					<div class="mb-3">
						<label for="playerSelect" class="form-label">Select a Player:</label>
						<select id="playerSelect" class="form-select" @bind-Value="SelectedPlayerId" @bind-Value:event="onchange">
							<option value="0">-- Select --</option>
							@foreach (var player in Players)
							{
								<option value="@player.Id">@player.Name</option>
							}
						</select>
					</div>

					<div class="mb-2">
						<button type="button" class="btn btn-primary" @onclick="() => AddPlayer()" disabled="@(SelectedPlayers.Count >= 4 || SelectedPlayerId == 0)">Add Player</button>
					</div>
				</div>
			}

			@if (SelectedPlayers.Count >= 4)
			{
				<p class="text-danger">Maximum of 4 players reached.</p>
			}

			<table class="table">
				<thead>
					<tr>
						<th>#</th>
						<th>Player Name</th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var player in SelectedPlayers.Select((p, index) => new { p, index }))
					{
						<tr>
							<td>@(player.index + 1)</td>
							<td>@player.p.Name</td>
							<td><button type="button" class="btn btn-danger" @onclick="() => RemovePlayer(player.index, player.p.Id)" value="Remove">Remove Player</button></td>
						</tr>
					}
				</tbody>
			</table>
		</div>

		<div class="row">
			<button type="submit" class="btn btn-primary" disabled="@(SelectedPlayers.Count == 0)">Create</button>

			<div>
				<a href="/bookings">Back to List</a>
			</div>
		</div>
	</div>
</EditForm>



@code {
	private Booking Booking { get; set; } = new() { Date = DateTime.Today };

	private List<Player> Players = new();

	private List<string> TimeSlots { get; set; } = new();

	private string ErrorMessage = string.Empty;

	private List<Player> SelectedPlayers = new();

	private int SelectedPlayerId = 0;

	private DateTime _bookingDate = DateTime.Today;

	private bool blockSubmit = true;

	private string disabled = "disabled";

	public DateTime BookingDate
	{
		get => _bookingDate;
		set
		{
			_bookingDate = value;

			OnDateChanged(_bookingDate);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		TimeSlots = BookingRepo.GenerateAvailableTimes();
		if (TimeSlots.Any())
		{
			Booking.Slot = TimeSlots.First();
		}

		Players = await PlayerRepo.GetPlayersAsync();
		if (Players.Any())
		{
			Booking.PlayerId = Players.First().Id;
		}
	}


	private void OnDateChanged(DateTime bookingDate)
	{
		TimeSlots = BookingRepo.GenerateAvailableTimes(bookingDate);

		if (string.IsNullOrEmpty(TimeSlots.FirstOrDefault())){
			ErrorMessage = "There is not time available for the date selected.";
			return;
		}

		ErrorMessage = "";
		StateHasChanged();
	}


	private async Task AddBooking()
	{
		Booking.Date = BookingDate;

		if (!SlotAvailable())
		{
			ErrorMessage = "Select a future slot.";
			return;
		}

		var alreadyBooked = await BookingRepo.IsPlayerAlreadyBookedAsync(Booking.PlayerId, Booking.Date);
		if (alreadyBooked)
		{
			ErrorMessage = "Member already has a booking on this day.";
			return;
		}

		var slotAvailable = await BookingRepo.IsSlotAvailableAsync(Booking.Slot, Booking.Date);
		if (!slotAvailable)
		{
			ErrorMessage = "Slot is not available.";
			return;
		}

		if (!SelectedPlayers.Any())
		{
			ErrorMessage = "Please add at least one player.";
			return;
		}

		try
		{
			await BookingRepo.AddBookingAsync(Booking, SelectedPlayers.Select(p => new BookingPlayer { PlayerId = p.Id }).ToList());
			NavigationManager.NavigateTo("/bookings");
		}
		catch (Exception ex)
		{
			ErrorMessage = ex.Message;
		}
	}

	private bool SlotAvailable()
	{
		TimeSpan selectedTime = TimeSpan.Parse(Booking.Slot);
		DateTime currentDate = DateTime.Now;
		DateTime selectedDate = currentDate.Date + selectedTime;

		return selectedDate > currentDate;
	}

	private void AddPlayer()
	{
		if (SelectedPlayers.Count < 4)
		{
			var player = Players.FirstOrDefault(p => p.Id == SelectedPlayerId);

			if (player == null){
				ErrorMessage = "The player is not valid.";
				return;
			}

			if (!SelectedPlayers.Any(p => p.Id == player.Id))
			{
				SelectedPlayers.Add(player);
				SelectedPlayerId = 0; // Reset dropdown
			} else {
				ErrorMessage = "The player has already been added.";
				return;
			}


		}
	}

	private void RemovePlayer(int index, int playerId)
	{
		var playerToRemove = SelectedPlayers.FirstOrDefault(p => p.Id == playerId);
		if (playerToRemove != null)
		{
			SelectedPlayers.Remove(playerToRemove);
		}
	}
}
