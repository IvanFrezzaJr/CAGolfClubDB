@page "/bookings"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CAGolfClubDB.Models
@using CAGolfClubDB.Data
@implements IAsyncDisposable
@inject BookingRepository BookingRepository

<PageTitle>Booking</PageTitle>


<div class="table-wrapper">
    <div class="table-title">
        <div class="row">
            <div class="col-sm-8"><h2>Booking <b>Details</b></h2></div>
            <div class="col-sm-4 text-end">
                <a href="bookings/create" class="btn btn-primary"><span class="bi bi-plus-circle-fill" aria-hidden="true"></span>Create New</a>
            </div>
        </div>
    </div>


    @if (itemsQueryable == null)
    {
        <p><em>loading...</em></p>
    }
    else
    {
  
        <QuickGrid Class="table table-bordered" Items="@FilteredBookings">
            <PropertyColumn Property="booking => booking.PlayerId" Title="ID" Sortable="true" />
            <PropertyColumn Property="booking => booking.Date" Format="dd/MM/yyyy" Sortable="true" />
            <PropertyColumn Property="booking => booking.Slot" Sortable="true" />


            <TemplateColumn Context="booking" Title="Action">
                <a href="@($"bookings/edit?id={booking.Id}")" class="btn btn-sm btn-warning"><span class="bi bi-pencil-fill" aria-hidden="true"></span>Edit</a>
                <a href="@($"bookings/details?id={booking.Id}")" class="btn btn-sm btn-info"><span class="bi bi-file-earmark-fill" aria-hidden="true"></span>Details</a>
                <a href="@($"bookings/delete?id={booking.Id}")" class="btn btn-sm btn-danger"><span class="bi bi-trash3-fill" aria-hidden="true"></span>Delete</a>
            </TemplateColumn>
        </QuickGrid>

    }


</div>


@code {
    private CAGolfClubDBContext context = default!;

    private IQueryable<Booking>? itemsQueryable;


    IQueryable<Booking> FilteredBookings
    {
        get
        {
            return BookingRepository.GetFilteredBookings();
        }
    }

    protected async Task LoadBookingsAsync()
    {
        try
        {
            var items = await BookingRepository.GetBookingsAsync();
            itemsQueryable = items.AsQueryable();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error load player: {ex.Message}");
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadBookingsAsync();
    }

    public ValueTask DisposeAsync() => ValueTask.CompletedTask;
}
