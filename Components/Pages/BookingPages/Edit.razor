@page "/bookings/edit"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using CAGolfClubDB.Models
@inject IDbContextFactory<CAGolfClubDB.Data.CAGolfClubDBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit a Booking</PageTitle>



@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">
        @ErrorMessage
    </div>
}


@if (Booking is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm method="post" Model="Booking" OnValidSubmit="UpdateBooking" FormName="edit" Enhance>

        <div class="table-title" style="padding: 1em 0 3em 0;">
            <div class="row">
                <div class="col-sm-8"><h2>Edit a <b>booking</b></h2></div>
                <div class="col-sm-4 text-end">
                    <a href="/bookings" class="btn btn-secondary">Back to List</a>
                </div>
            </div>
        </div>

        <DataAnnotationsValidator />
        <ValidationSummary role="alert"/>

        <input type="hidden" name="Booking.Id" value="@Booking.Id" />

        <div class="row">
            <div class="mb-3">
                <label for="plauerid" class="form-label">Booking By:</label>
                <InputSelect id="plauerid" @bind-Value="Booking.PlayerId" class="form-control custom-select" aria-required="true">
                    @foreach (var player in Players)
                    {
                        <option class="form-control custom-option" value="@player.Id">@player.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3">
                <label for="date" class="form-label">Date:</label>
                <InputDate id="date" @bind-Value="Booking.Date" class="form-control" aria-required="true"/>
                <ValidationMessage For="() => Booking.Date" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="slot" class="form-label">Slot:</label>
                <InputSelect id="slot" @bind-Value="Booking.Slot" class="form-control custom-select" aria-required="true">
                    @foreach (var item in TimeSlots)
                    {
                        <option class="form-control custom-option" value="@item">@item</option>
                    }
                </InputSelect>
            </div>
            <div class="mb-3" hidden>
                <label for="createdat" class="form-label">CreatedAt:</label>
                <InputDate id="createdat" @bind-Value="Booking.CreatedAt" class="form-control" />
                <ValidationMessage For="() => Booking.CreatedAt" class="text-danger" />
            </div>
            <div class="mb-3" hidden>
                <label for="updatedat" class="form-label">UpdatedAt:</label>
                <InputDate id="updatedat" @bind-Value="Booking.UpdatedAt" class="form-control" />
                <ValidationMessage For="() => Booking.UpdatedAt" class="text-danger" />
            </div>


            <div class="row">


                <div class="table-wrapper">
                    <div class="table-title">
                        <div class="row">
                            <div class="col-sm-12"><h2>Players ready for the <b>match</b></h2></div>
                            <div class="col-sm-8">

                                @if (PlayersAvailable.Count > 0)
                                {
                                    <div class="row align-items-center">
                                        <div class="mb-3">
                                            <select id="playerSelect" class="form-select custom-select" @bind-Value="SelectedPlayerId" @bind-Value:event="onchange">
                                                <option value="0">-- Select --</option>
                                                @foreach (var player in PlayersAvailable)
                                                {
                                                    <option class="form-control custom-option" value="@player.Id">@player.Name</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                }

                                @if (SelectedPlayers.Count >= 4)
                                {
                                    <p class="text-danger">Maximum of 4 players reached.</p>
                                }


                            </div>
                            <div class="col-sm-4">
                                <button type="button" style="padding: 12px;" class="btn btn-primary" @onclick="() => AddPlayer()" disabled="@(SelectedPlayers.Count >= 4 || SelectedPlayerId == 0)"><span class="bi bi-plus-circle-fill" aria-hidden="true"></span>Add Player</button>

                            </div>
                        </div>
                    </div>
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Player Name</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var player in SelectedPlayers.Select((p, index) => new { p, index }))
                            {
                                <tr>
                                    <td>@(player.index + 1)</td>
                                    <td>@player.p.Name</td>
                                    <td><button class="btn btn-danger" @onclick="() => RemovePlayer(player.index, player.p.Id)">Remove</button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
       

            <div class="row">
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        
        
        </div>
    </EditForm>
}

<div>
    <a href="/bookings">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Booking? Booking { get; set; }

    private string ErrorMessage = string.Empty;

    private List<Player> Players = new();

    private List<Player> PlayersAvailable = new();

    private List<Player> SelectedPlayers = new();


    private List<BookingPlayer> BookingPlayers { get; set; } = new();

    private int SelectedPlayerId = 0;


    private List<string> TimeSlots { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Booking ??= await context.Booking.FirstOrDefaultAsync(m => m.Id == Id);

        if (Booking is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        TimeSlots = await GenerateAvailableTimes();
        Players = await GetPlayersAsync();
        PlayersAvailable = await GetPlayersAsync();


        var bookingPlayers = await context.BookingPlayer.Where(m => m.BookingId == Id).ToListAsync();

        foreach (var bookingPlayer in bookingPlayers)
        {
            var playersOnBooking = await context.Player.Where(p => p.Id == bookingPlayer.PlayerId).ToListAsync();

            foreach (var p in playersOnBooking)
            {
                SelectedPlayers.Add(p);
            }
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateBooking()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Booking!).State = EntityState.Modified;

        using (var transaction = await context.Database.BeginTransactionAsync())
        {
            try
            {
                await context.SaveChangesAsync();

                var playersToDelete = context.BookingPlayer
                              .Where(b => b.BookingId == Booking.Id)
                              .ToList();

                context.BookingPlayer.RemoveRange(playersToDelete);

                await context.SaveChangesAsync();

                foreach (var SelectedPlayer in SelectedPlayers){
                    context.BookingPlayer.Add(new BookingPlayer {
                            PlayerId = SelectedPlayer.Id,
                            BookingId = Booking.Id
                    });
                }
      
                await context.SaveChangesAsync();

                await transaction.CommitAsync();
            }

            catch (DbUpdateConcurrencyException)
            {
                if (!BookingExists(Booking!.Id))
                {
                    NavigationManager.NavigateTo("notfound");
                }
                else
                {
                    throw;
                }
            }
        }

        NavigationManager.NavigateTo("/bookings");
    }

    private bool BookingExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Booking.Any(e => e.Id == id);
    }


    private async Task<List<string>> GenerateAvailableTimes()
    {
        var times = new List<string>();
        var slotTime = new DateTime(1, 1, 1, 0, 0, 0);
        var currentTime = DateTime.Now;

        // Adds time slots every 15 minutes until 23:45
        while (slotTime.Hour != 23 || slotTime.Minute != 45)
        {
            times.Add(slotTime.ToString("HH:mm"));
            slotTime = slotTime.AddMinutes(15); // Advances by 15 minutes

        }

        // Advances the last 15 minutes
        slotTime.AddMinutes(15);
        times.Add(slotTime.ToString("HH:mm"));

        return times;

    }

    private async Task<List<Player>> GetPlayersAsync()
    {
        using var context = DbFactory.CreateDbContext();
        return await context.Player.ToListAsync();
    }




    private bool SlotAvailable()
    {
        TimeSpan SelecedTimeFormated = TimeSpan.Parse(Booking.Slot);

        DateTime currentDate = DateTime.Now;

        DateTime selectedDate = currentDate.Date + SelecedTimeFormated;

        if (selectedDate > currentDate)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private void AddPlayer()
    {
        if (SelectedPlayers.Count < 4)
        {
            var player = PlayersAvailable.FirstOrDefault(p => p.Id == SelectedPlayerId);
            if (player != null && !SelectedPlayers.Any(p => p.Id == player.Id))
            {
                BookingPlayers.Add(new BookingPlayer
                    {
                        PlayerId = player.Id,
                        BookingId = 0
                    }
                );
                SelectedPlayers.Add(player);
                SelectedPlayerId = 0; // Reset dropdown
            }
        }
    }

    private void RemovePlayer(int index, int playerId)
    {
        BookingPlayer? playerToRemove = BookingPlayers.FirstOrDefault(p => p.Id == playerId);

        if (playerToRemove != null)
        {
            BookingPlayers.Remove(playerToRemove);
        }

        SelectedPlayers.RemoveAt(index);
    }

}
