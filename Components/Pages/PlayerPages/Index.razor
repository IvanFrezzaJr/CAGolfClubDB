@page "/players"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CAGolfClubDB.Models
@using CAGolfClubDB.Data
@implements IAsyncDisposable
@inject PlayerRepository PlayerRepository

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="players/create">Create New</a>
</p>

@if (itemsQueryable == null) 
{
    <p><em>loading...</em></p>
}
else
{
    <div class="grid">
        <QuickGrid Class="table" Items="@FilteredPlayers" ItemKey="player => player.Id" Pagination="@pagination">
            <PropertyColumn Title="MembershipNumber" Property="player => player.MembershipNumber" Sortable="true" />
            <PropertyColumn Title="Name" Property="player => player.Name" Sortable="true">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Player name..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Title="Email" Property="player => player.Email" Sortable="true" />
            <PropertyColumn Title="Gender" Property="player => player.Gender" Sortable="true">
                <ColumnOptions>
                    <div class="filter-box">
                        <select @bind="genderFilter" @bind:event="onchange">
                            <option value="All" selected>All</option>
                            @foreach (var gender in genderList)
                            {
                                <option value="@gender">@gender</option>
                            }
                        </select>
                    </div>
                </ColumnOptions>
            </PropertyColumn>
        <PropertyColumn Title="Handicap" Property="player => player.Handcap" Sortable="true">
                <ColumnOptions>
                    <div class="filter-box">
                        <select @bind="handicapFilter" @bind:event="onchange">
                            <option value="All" selected>All</option>
                            <option value="10">Below 10</option>
                            <option value="11-20">Between 11 and 20</option>
                            <option value="20">Above 20</option>
                        </select>
                    </div>
                </ColumnOptions>
            </PropertyColumn>

            <TemplateColumn Context="player">
                <a href="@($"players/edit?id={player.Id}")">Edit</a> |
                <a href="@($"players/details?id={player.Id}")">Details</a> |
                <a href="@($"players/delete?id={player.Id}")">Delete</a>
            </TemplateColumn>
        </QuickGrid>
    </div>

    <div class="page-size-chooser">
        times :
        <select @bind="@pagination.ItemsPerPage">
            <option>5</option>
            <option>10</option>
        </select>
    </div>
    <Paginator State="@pagination" />
}

@code {
    private IQueryable<Player>? itemsQueryable;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    private string nameFilter = string.Empty;
    private string genderFilter = "All";
    private string handicapFilter = "All";
    protected List<string> genderList = [];

    IQueryable<Player> FilteredPlayers
    {
        get
        {
            return PlayerRepository.GetFilteredPlayers(nameFilter, genderFilter, handicapFilter);
        }
    }

    protected async Task LoadGendersAsync()
    {
        genderList = await PlayerRepository.GetDistinctGendersAsync();
    }

    protected async Task LoadPlayersAsync()
    {
        try
        {
            var items = await PlayerRepository.GetPlayersAsync();
            itemsQueryable = items.AsQueryable();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error load player: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPlayersAsync();
        await LoadGendersAsync();
    }


    public ValueTask DisposeAsync() => ValueTask.CompletedTask;
}
