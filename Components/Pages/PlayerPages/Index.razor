@page "/players"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CAGolfClubDB.Models
@using CAGolfClubDB.Data
@implements IAsyncDisposable
@inject IDbContextFactory<CAGolfClubDB.Data.CAGolfClubDBContext> DbFactory


<PageTitle>Index</PageTitle>


<h1>Index</h1>

<p>
    <a href="players/create">Create New</a>
</p>

@if (itemsQueryable == null) {
    <p><em>loading...</em></p>
}
else
{


    <div class="grid">
        <QuickGrid Class="table" Items="@FilteredPlayers" ItemKey="@(x => x.Id)" Pagination="@pagination">
            <PropertyColumn Title="MembershipNumber" Property="@(x => x.MembershipNumber)" Sortable="true" />
            <PropertyColumn Title="Name" Property="@(x => x.Name)" Sortable="true">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Player name..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Title="Email" Property="@(x => x.Email)" Sortable="true" />
            <PropertyColumn Title="Gender" Property="@(x => x.Gender)" Sortable="true">
                <ColumnOptions>
                    <div class="filter-box">
                        <select @bind="genderFilter" @bind:event="onchange">
                            <option value="All" selected>All</option>
                            @foreach (var gender in genderList)
                            {
                                <option value="@gender">@gender</option>
                            }
                        </select>
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Title="Handicap" Property="@(x => x.Handcap)" Sortable="true" />

            <TemplateColumn Context="player">
                <a href="@($"players/edit?id={player.Id}")">Edit</a> |
                <a href="@($"players/details?id={player.Id}")">Details</a> |
                <a href="@($"players/delete?id={player.Id}")">Delete</a>
            </TemplateColumn>
        </QuickGrid>
    </div>

    <div class="page-size-chooser">
        times :
        <select @bind="@pagination.ItemsPerPage">
            <option>5</option>
            <option>10</option>
        </select>
    </div>
    <Paginator State="@pagination" />
}

@code {
    private CAGolfClubDBContext context = default!;
    private IQueryable<Player>? itemsQueryable;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    private string nameFilter = string.Empty;
    private string genderFilter = "All";
    protected List<string> genderList = [];


    IQueryable<Player> FilteredPlayers
    {
        get
        {
            IQueryable<Player>? result = itemsQueryable;

            if (result == null){
                return Enumerable.Empty<Player>().AsQueryable();
            }


            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            if (genderFilter != "All")
            {
                result = result.Where(c => c.Gender == genderFilter);
            }

            return result;
        }
    }

    protected async Task GenderList(){
        genderList = await context.Player
            .Select(p => p.Gender) 
            .Distinct()
            .ToListAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        var items = await context.Player.ToListAsync();

        itemsQueryable = context.Player.OrderBy(p => p.Name);
        itemsQueryable = items.AsQueryable();

        await GenderList();

    }


    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
