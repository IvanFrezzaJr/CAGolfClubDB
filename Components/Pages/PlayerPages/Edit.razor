@page "/players/edit"
@using Microsoft.EntityFrameworkCore
@using CAGolfClubDB.Models
@inject IDbContextFactory<CAGolfClubDB.Data.CAGolfClubDBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Player</PageTitle>

@if (Player is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm method="post" Model="Player" OnValidSubmit="UpdatePlayer" FormName="edit" Enhance>

        <div class="table-title" style="padding: 1em 0 3em 0;">
            <div class="row">
                <div class="col-sm-8"><h2>Edit <b>player</b></h2></div>
                <div class="col-sm-4 text-end">
                    <a href="/players" class="btn btn-outline-secondary">Back to List</a>
                </div>
            </div>
        </div>


        <DataAnnotationsValidator />
        <ValidationSummary role="alert"/>
        <input type="hidden" name="Player.Id" value="@Player.Id" />
        <div class="mb-3">
            <label for="membershipnumber" class="form-label">MembershipNumber:</label>
            <InputText id="membershipnumber" @bind-Value="Player.MembershipNumber" class="form-control" disabled />
            <ValidationMessage For="() => Player.MembershipNumber" class="text-danger" />
        </div>
        <div class="mb-3">
            <label for="name" class="form-label">Name:</label>
            <InputText id="name" @bind-Value="Player.Name" class="form-control" aria-required="true"/>
            <ValidationMessage For="() => Player.Name" class="text-danger" />
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email:</label>
            <InputText id="email" @bind-Value="Player.Email" class="form-control" aria-required="true"/>
            <ValidationMessage For="() => Player.Email" class="text-danger" />
        </div>
        <div class="mb-3">
            <label for="gender" class="form-label">Gender:</label>
            <InputSelect id="gender" @bind-Value="Player.Gender" class="form-control" aria-required="true">
                @foreach (var item in Enum.GetValues(typeof(Gender)))
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label for="handcap" class="form-label">Handcap:</label>
            <InputNumber id="handcap" @bind-Value="Player.Handcap" class="form-control" aria-required="true"/>
            <ValidationMessage For="() => Player.Handcap" class="text-danger" />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>

}


@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Player? Player { get; set; }

    private Gender selectedGender = Gender.Other;
    private enum Gender
    {
        Male,
        Female,
        NonBinary,
        Other
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Player ??= await context.Player.FirstOrDefaultAsync(m => m.Id == Id);

        if (Player is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdatePlayer()
    {
        using var context = DbFactory.CreateDbContext();

        if (Player != null){
            Player.UpdatedAt = DateTime.UtcNow;
        }

        context.Attach(Player!).State = EntityState.Modified;

        try
        {
            if (Player != null)
            {
                Player.MembershipNumber = Player.Id.ToString("D8");
                context.Player.Update(Player);
            }
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!PlayerExists(Player!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/players");
    }

    private bool PlayerExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Player.Any(e => e.Id == id);
    }
}
