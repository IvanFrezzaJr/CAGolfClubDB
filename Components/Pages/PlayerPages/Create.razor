@page "/players/create"
@using Microsoft.EntityFrameworkCore
@using CAGolfClubDB.Models
@inject IDbContextFactory<CAGolfClubDB.Data.CAGolfClubDBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create Player</PageTitle>


<EditForm method="post" Model="Player" OnValidSubmit="AddPlayer" FormName="create" Enhance>

    <div class="table-title" style="padding: 1em 0 3em 0;">
        <div class="row">
            <div class="col-sm-8"><h2>Create <b>player</b></h2></div>
            <div class="col-sm-4 text-end">
                <a href="/players" class="btn btn-outline-secondary">Back to List</a>
            </div>
        </div>
    </div>

    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert"/>
    <div class="mb-3">
        <label for="membershipnumber" class="form-label">Membership Number:</label> 
        <InputText id="membershipnumber" @bind-Value="Player.MembershipNumber" class="form-control input-disabled" disabled />
        <ValidationMessage For="() => Player.MembershipNumber" class="text-danger" /> 
    </div>        
    <div class="mb-3">
        <label for="name" class="form-label">Name:</label> 
        <InputText id="name" @bind-Value="Player.Name" class="form-control" aria-required="true"/> 
        <ValidationMessage For="() => Player.Name" class="text-danger" /> 
    </div>        
    <div class="mb-3">
        <label for="email" class="form-label">Email:</label> 
        <InputText id="email" @bind-Value="Player.Email" class="form-control" aria-required="true"/> 
        <ValidationMessage For="() => Player.Email" class="text-danger" /> 
    </div>        

    <div class="mb-3">
        <label for="gender" class="form-label">Gender:</label>
        <InputSelect id="gender" @bind-Value="Player.Gender" class="form-control" aria-required="true">
            @foreach (var item in Enum.GetValues(typeof(Gender)))
            {
                <option value="@item">@item</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="handcap" class="form-label">Handcap:</label> 
        <InputNumber id="handcap" @bind-Value="Player.Handcap" class="form-control" aria-required="true"/> 
        <ValidationMessage For="() => Player.Handcap" class="text-danger" /> 
    </div>        
    <button type="submit" class="btn btn-primary">Create</button>

</EditForm>

@code {
    [SupplyParameterFromForm]
    private Player Player { get; set; } = new();

    private Gender selectedGender = Gender.Other;
    private enum Gender
    {
        Male,
        Female,
        NonBinary,
        Other
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddPlayer()
    {
        using var context = DbFactory.CreateDbContext();;

        context.Player.Add(Player);
        await context.SaveChangesAsync();

        Player.MembershipNumber = Player.Id.ToString("D8");
        context.Player.Update(Player);
        await context.SaveChangesAsync();



        NavigationManager.NavigateTo("/players");
    }
}
