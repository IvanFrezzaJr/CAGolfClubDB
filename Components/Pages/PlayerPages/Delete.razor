@page "/players/delete"
@using Microsoft.EntityFrameworkCore
@using CAGolfClubDB.Models
@inject IDbContextFactory<CAGolfClubDB.Data.CAGolfClubDBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Player</PageTitle>

    @if (player is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <EditForm method="post" Model="player" OnValidSubmit="DeletePlayer" FormName="delete" Enhance>
            <div class="table-wrapper">
                <div class="table-title" style="padding: 1em 0 3em 0;">
                    <div class="row">
                        <div class="col-sm-6"><h2>Player <b>details</b></h2></div>
                        <div class="col-sm-6">
                            <button type="submit" class="btn btn-danger" disabled="@(player is null)">Delete</button>
                            <a href="/players" class="btn btn-secondary">Back to List</a>
                        </div>
                    <p>Are you sure you want to delete this?</p>
                    </div>        
                </div>
                <dl class="row">
                    <dt class="col-sm-2">MembershipNumber</dt>
                    <dd class="col-sm-10">@player.MembershipNumber</dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-2">Name</dt>
                    <dd class="col-sm-10">@player.Name</dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-2">Email</dt>
                    <dd class="col-sm-10">@player.Email</dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-2">Gender</dt>
                    <dd class="col-sm-10">@player.Gender</dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-2">Handcap</dt>
                    <dd class="col-sm-10">@player.Handcap</dd>
                </dl>            
            </div>
        </EditForm>
    }


@code {
    private Player? player;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        player = await context.Player.FirstOrDefaultAsync(m => m.Id == Id);

        if (player is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeletePlayer()
    {
        using var context = DbFactory.CreateDbContext();
        context.Player.Remove(player!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/players");
    }
}
