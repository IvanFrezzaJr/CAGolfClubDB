@page "/players/details"
@using Microsoft.EntityFrameworkCore
@using CAGolfClubDB.Models
@inject IDbContextFactory<CAGolfClubDB.Data.CAGolfClubDBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Player Details</PageTitle>


@if (player is null)
{
    <p><em>Loading...</em></p>
}
else {

    <div class="table-wrapper">
        <div class="table-title" style="padding: 1em 0 3em 0;">
            <div class="row">
                <div class="col-sm-6"><h2>Player <b>details</b></h2></div>
                <div class="col-sm-6">
                    <a href="@($"/players/edit?id={player.Id}")" class="btn btn-primary">Edit</a>
                    <a href="@($"/players")" class="btn btn-secondary">Back to List</a>
                </div>
            </div>        
        </div>

        <dl class="row">
            <dt class="col-sm-2">MembershipNumber</dt>
            <dd class="col-sm-10">@player.MembershipNumber</dd>
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@player.Name</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@player.Email</dd>
            <dt class="col-sm-2">Gender</dt>
            <dd class="col-sm-10">@player.Gender</dd>
            <dt class="col-sm-2">Handcap</dt>
            <dd class="col-sm-10">@player.Handcap</dd>
        </dl>

    </div>
}


@code {
    private Player? player;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        player = await context.Player.FirstOrDefaultAsync(m => m.Id == Id);

        if (player is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
